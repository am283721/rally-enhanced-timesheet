<!DOCTYPE html>
<html>
<head>
    <title>Invoice Report</title>
    <!--  (c) 2013 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Tue Mar 17 2015 10:56:48 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Tue Mar 17 2015 10:56:48 GMT-0700 (PDT)";
        var CHECKSUM = 50780665380;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/* Blob.js
 * A Blob implementation.
 * 2013-06-20
 * 
 * By Eli Grey, http://eligrey.com
 * By Devin Samarin, https://github.com/eboyjr
 * License: X11/MIT
 *   See LICENSE.md
 */

/*global self, unescape */
/*jslint bitwise: true, regexp: true, confusion: true, es5: true, vars: true, white: true,
  plusplus: true */

/*! @source http://purl.eligrey.com/github/Blob.js/blob/master/Blob.js */

if (!(typeof Blob === "function" || typeof Blob === "object") || typeof URL === "undefined")
if ((typeof Blob === "function" || typeof Blob === "object") && typeof webkitURL !== "undefined") self.URL = webkitURL;
else var Blob = (function (view) {
    "use strict";

    var BlobBuilder = view.BlobBuilder || view.WebKitBlobBuilder || view.MozBlobBuilder || view.MSBlobBuilder || (function(view) {
        var
              get_class = function(object) {
                return Object.prototype.toString.call(object).match(/^\[object\s(.*)\]$/)[1];
            }
            , FakeBlobBuilder = function BlobBuilder() {
                this.data = [];
            }
            , FakeBlob = function Blob(data, type, encoding) {
                this.data = data;
                this.size = data.length;
                this.type = type;
                this.encoding = encoding;
            }
            , FBB_proto = FakeBlobBuilder.prototype
            , FB_proto = FakeBlob.prototype
            , FileReaderSync = view.FileReaderSync
            , FileException = function(type) {
                this.code = this[this.name = type];
            }
            , file_ex_codes = (
                  "NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR "
                + "NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR"
            ).split(" ")
            , file_ex_code = file_ex_codes.length
            , real_URL = view.URL || view.webkitURL || view
            , real_create_object_URL = real_URL.createObjectURL
            , real_revoke_object_URL = real_URL.revokeObjectURL
            , URL = real_URL
            , btoa = view.btoa
            , atob = view.atob
            
            , ArrayBuffer = view.ArrayBuffer
            , Uint8Array = view.Uint8Array
        ;
        FakeBlob.fake = FB_proto.fake = true;
        while (file_ex_code--) {
            FileException.prototype[file_ex_codes[file_ex_code]] = file_ex_code + 1;
        }
        if (!real_URL.createObjectURL) {
            URL = view.URL = {};
        }
        URL.createObjectURL = function(blob) {
            var
                  type = blob.type
                , data_URI_header
            ;
            if (type === null) {
                type = "application/octet-stream";
            }
            if (blob instanceof FakeBlob) {
                data_URI_header = "data:" + type;
                if (blob.encoding === "base64") {
                    return data_URI_header + ";base64," + blob.data;
                } else if (blob.encoding === "URI") {
                    return data_URI_header + "," + decodeURIComponent(blob.data);
                } if (btoa) {
                    return data_URI_header + ";base64," + btoa(blob.data);
                } else {
                    return data_URI_header + "," + encodeURIComponent(blob.data);
                }
            } else if (real_create_object_URL) {
                return real_create_object_URL.call(real_URL, blob);
            }
        };
        URL.revokeObjectURL = function(object_URL) {
            if (object_URL.substring(0, 5) !== "data:" && real_revoke_object_URL) {
                real_revoke_object_URL.call(real_URL, object_URL);
            }
        };
        FBB_proto.append = function(data/*, endings*/) {
            var bb = this.data;
            // decode data to a binary string
            if (Uint8Array && (data instanceof ArrayBuffer || data instanceof Uint8Array)) {
                var
                      str = ""
                    , buf = new Uint8Array(data)
                    , i = 0
                    , buf_len = buf.length
                ;
                for (; i < buf_len; i++) {
                    str += String.fromCharCode(buf[i]);
                }
                bb.push(str);
            } else if (get_class(data) === "Blob" || get_class(data) === "File") {
                if (FileReaderSync) {
                    var fr = new FileReaderSync;
                    bb.push(fr.readAsBinaryString(data));
                } else {
                    // async FileReader won't work as BlobBuilder is sync
                    throw new FileException("NOT_READABLE_ERR");
                }
            } else if (data instanceof FakeBlob) {
                if (data.encoding === "base64" && atob) {
                    bb.push(atob(data.data));
                } else if (data.encoding === "URI") {
                    bb.push(decodeURIComponent(data.data));
                } else if (data.encoding === "raw") {
                    bb.push(data.data);
                }
            } else {
                if (typeof data !== "string") {
                    data += ""; // convert unsupported types to strings
                }
                // decode UTF-16 to binary string
                bb.push(unescape(encodeURIComponent(data)));
            }
        };
        FBB_proto.getBlob = function(type) {
            if (!arguments.length) {
                type = null;
            }
            return new FakeBlob(this.data.join(""), type, "raw");
        };
        FBB_proto.toString = function() {
            return "[object BlobBuilder]";
        };
        FB_proto.slice = function(start, end, type) {
            var args = arguments.length;
            if (args < 3) {
                type = null;
            }
            return new FakeBlob(
                  this.data.slice(start, args > 1 ? end : this.data.length)
                , type
                , this.encoding
            );
        };
        FB_proto.toString = function() {
            return "[object Blob]";
        };
        return FakeBlobBuilder;
    }(view));

    return function Blob(blobParts, options) {
        var type = options ? (options.type || "") : "";
        var builder = new BlobBuilder();
        if (blobParts) {
            for (var i = 0, len = blobParts.length; i < len; i++) {
                builder.append(blobParts[i]);
            }
        }
        return builder.getBlob(type);
    };
}(self));
/* FileSaver.js
 * A saveAs() FileSaver implementation.
 * 2013-01-23
 *
 * By Eli Grey, http://eligrey.com
 * License: X11/MIT
 *   See LICENSE.md
 */

/*global self */
/*jslint bitwise: true, regexp: true, confusion: true, es5: true, vars: true, white: true,
  plusplus: true */

/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

var saveAs = saveAs
  || (navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob.bind(navigator))
  || (function(view) {
    "use strict";

    var doc = view.document
          // only get URL when necessary in case BlobBuilder.js hasn't overridden it yet
        , get_URL = function() {
            return view.URL || view.webkitURL || view;
        }
        , URL = view.URL || view.webkitURL || view
        , save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a")
        , can_use_save_link =  !view.externalHost && "download" in save_link
        , click = function(node) {
            var event = doc.createEvent("MouseEvents");
            event.initMouseEvent(
                "click", true, false, view, 0, 0, 0, 0, 0
                , false, false, false, false, 0, null
            );
            node.dispatchEvent(event);
        }
        , webkit_req_fs = view.webkitRequestFileSystem
        , req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem
        , throw_outside = function (ex) {
            (view.setImmediate || view.setTimeout)(function() {
                throw ex;
            }, 0);
        }
        , force_saveable_type = "application/octet-stream"
        , fs_min_size = 0
        , deletion_queue = []
        , process_deletion_queue = function() {
            var i = deletion_queue.length;
            while (i--) {
                var file = deletion_queue[i];
                if (typeof file === "string") { // file is an object URL
                    URL.revokeObjectURL(file);
                } else { // file is a File
                    file.remove();
                }
            }
            deletion_queue.length = 0; // clear queue
        }
        , dispatch = function(filesaver, event_types, event) {
            event_types = [].concat(event_types);
            var i = event_types.length;
            while (i--) {
                var listener = filesaver["on" + event_types[i]];
                if (typeof listener === "function") {
                    try {
                        listener.call(filesaver, event || filesaver);
                    } catch (ex) {
                        throw_outside(ex);
                    }
                }
            }
        }
        , FileSaver = function(blob, name) {
            // First try a.download, then web filesystem, then object URLs
            var
                  filesaver = this
                , type = blob.type
                , blob_changed = false
                , object_url
                , target_view
                , get_object_url = function() {
                    var object_url = get_URL().createObjectURL(blob);
                    deletion_queue.push(object_url);
                    return object_url;
                }
                , dispatch_all = function() {
                    dispatch(filesaver, "writestart progress write writeend".split(" "));
                }
                // on any filesys errors revert to saving with object URLs
                , fs_error = function() {
                    // don't create more object URLs than needed
                    if (blob_changed || !object_url) {
                        object_url = get_object_url(blob);
                    }
                    if (target_view) {
                        target_view.location.href = object_url;
                    } else {
                        window.open(object_url, "_blank");
                    }
                    filesaver.readyState = filesaver.DONE;
                    dispatch_all();
                }
                , abortable = function(func) {
                    return function() {
                        if (filesaver.readyState !== filesaver.DONE) {
                            return func.apply(this, arguments);
                        }
                    };
                }
                , create_if_not_found = {create: true, exclusive: false}
                , slice
            ;
            filesaver.readyState = filesaver.INIT;
            if (!name) {
                name = "download";
            }
            if (can_use_save_link) {
                object_url = get_object_url(blob);
                save_link.href = object_url;
                save_link.download = name;
                click(save_link);
                filesaver.readyState = filesaver.DONE;
                dispatch_all();
                return;
            }
            // Object and web filesystem URLs have a problem saving in Google Chrome when
            // viewed in a tab, so I force save with application/octet-stream
            // http://code.google.com/p/chromium/issues/detail?id=91158
            if (view.chrome && type && type !== force_saveable_type) {
                slice = blob.slice || blob.webkitSlice;
                blob = slice.call(blob, 0, blob.size, force_saveable_type);
                blob_changed = true;
            }
            // Since I can't be sure that the guessed media type will trigger a download
            // in WebKit, I append .download to the filename.
            // https://bugs.webkit.org/show_bug.cgi?id=65440
            if (webkit_req_fs && name !== "download") {
                name += ".download";
            }
            if (type === force_saveable_type || webkit_req_fs) {
                target_view = view;
            }
            if (!req_fs) {
                fs_error();
                return;
            }
            fs_min_size += blob.size;
            req_fs(view.TEMPORARY, fs_min_size, abortable(function(fs) {
                fs.root.getDirectory("saved", create_if_not_found, abortable(function(dir) {
                    var save = function() {
                        dir.getFile(name, create_if_not_found, abortable(function(file) {
                            file.createWriter(abortable(function(writer) {
                                writer.onwriteend = function(event) {
                                    target_view.location.href = file.toURL();
                                    deletion_queue.push(file);
                                    filesaver.readyState = filesaver.DONE;
                                    dispatch(filesaver, "writeend", event);
                                };
                                writer.onerror = function() {
                                    var error = writer.error;
                                    if (error.code !== error.ABORT_ERR) {
                                        fs_error();
                                    }
                                };
                                "writestart progress write abort".split(" ").forEach(function(event) {
                                    writer["on" + event] = filesaver["on" + event];
                                });
                                writer.write(blob);
                                filesaver.abort = function() {
                                    writer.abort();
                                    filesaver.readyState = filesaver.DONE;
                                };
                                filesaver.readyState = filesaver.WRITING;
                            }), fs_error);
                        }), fs_error);
                    };
                    dir.getFile(name, {create: false}, abortable(function(file) {
                        // delete file if it already exists
                        file.remove();
                        save();
                    }), abortable(function(ex) {
                        if (ex.code === ex.NOT_FOUND_ERR) {
                            save();
                        } else {
                            fs_error();
                        }
                    }));
                }), fs_error);
            }), fs_error);
        }
        , FS_proto = FileSaver.prototype
        , saveAs = function(blob, name) {
            return new FileSaver(blob, name);
        }
    ;
    FS_proto.abort = function() {
        var filesaver = this;
        filesaver.readyState = filesaver.DONE;
        dispatch(filesaver, "abort");
    };
    FS_proto.readyState = FS_proto.INIT = 0;
    FS_proto.WRITING = 1;
    FS_proto.DONE = 2;

    FS_proto.error =
    FS_proto.onwritestart =
    FS_proto.onprogress =
    FS_proto.onwrite =
    FS_proto.onabort =
    FS_proto.onerror =
    FS_proto.onwriteend =
        null;

    view.addEventListener("unload", process_deletion_queue, false);
    return saveAs;
}(self));

if (typeof module !== 'undefined') module.exports = saveAs;
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     text: "Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>TS</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
//                if ( CHECKSUM ) {
//                    if ( CHECKSUM !== me._generateChecksum(text) ) {
//                        console.log("Checksums don't match!");
//                        if ( me.dialog ) {
//                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
//                        }
//                    }
//                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Old Dominion Freight Line Technical Services Team."
        });
        
//        if ( APP_BUILD_DATE ) {
//            dialog_items.push({
//                xtype:'container',
//                html:'Build date/time: ' + APP_BUILD_DATE
//            });
//        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});
/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('CustomApp', {
    extend: 'Rally.app.App',
    componentCls: 'app',
    projects_to_consider_parents: ['Administrative Time','Support'],

    logger: new Rally.technicalservices.Logger(),
    defaults: { padding: 5, margin: 5 },
    items: [
        {xtype:'container', defaults: { margin: 5, padding: 5 }, layout: { type: 'hbox' }, items:[
            {xtype:'container',itemId:'date_selector_box'}, 
            {xtype:'container',itemId:'user_box'}, 
            {xtype:'container',itemId:'save_button_box'},
            {xtype:'container',itemId:'submit_button_box'},
            {xtype:'container',itemId:'message_box',style: '{\n    font-size:14px;\n    font-weight:800;\n}'},
        ]},
        {xtype:'container',itemId:'select_checks_box', defaults: { margin: 5, padding: 5 }, layout: { type: 'hbox' }},
        {xtype:'container',itemId:'grid_box'},
        {xtype:'tsinfolink'},
        {xtype:'container',itemId:'empty_box'}
    ],
    
    launch: function() {
        var me = this;

        var userSelected = Ext.getCmp('usr');
        this.logger.log("Launched with context: ",this.getContext());

        this.team_store = Ext.create('Rally.data.custom.Store',{
            data: [{'DisplayName':'Loading','UserName':'', 'ObjectID':-1 }]

        });

        me._addDateSelectors();
        
        this.compliance_store = Ext.create('Rally.data.custom.Store',{
            data: [{
                'DisplayName':'',
                'UserName':'', 
                'ObjectID':-1, 
                'Period':'', 
                'Project':'',
                'Release':'',
                'ReleaseID':'',
                'Expense':'',
                'Capital':'',
                'Total':0,
                'CapitalCost':''
                }]
        });
     
        this._getTeamMembers(this.getContext().getUser().ObjectID,this).then({
            success: function(users){
                Ext.Array.each(users, function(user) {
                    me.team_store.add({
                        "DisplayName":user.get("DisplayName"), 
                        "UserName":user.get("UserName"),
                        "ObjectID":user.get("ObjectID"),
                        "TotalHours":0,
                         "AdminHours":0,
                         "ProjectHours":0,
                         "MaintHours":0,
                         "SupportHours":0
                    });
                });
                                    
//                me._addDateSelectors();
//                me._addCheckboxes();
            }
        });
    },
    _onUserSelected:function(user){
        this._user = user;
        console.log('user', user);
    },


    _addDownloadButton: function() {

        this.down('#user_box').add({
                    xtype: 'rallyusersearchcombobox',
                    fieldLabel: 'select user:',
                    itemId:'usr',
                    id:'usr',
                    margin: 10,
                    listeners:{
                        change: function(combobox){
                            this._onUserSelected(combobox.getRecord());
                        },
                        scope: this
                    }
        });

        this.down('#save_button_box').add({
            xtype:'rallybutton',
            text:'Export to CSV',
            scope: this,
            handler: function() {
                this._makeCSV();
            }
        });

        this.down('#submit_button_box').add({
            xtype:'rallybutton',
            itemId: 'submit_button',
            text:'SUBMIT',
            scope: this,
            handler: function() {
                        this._mask("Gathering timesheet data...");
                        this._getTimesheets();
            }
        });
       
    },


    _addDateSelectors: function() {
        var me = this;
        var start_selector = this.down('#date_selector_box').add({
            xtype:'rallydatefield',
            itemId:'start_date_selector',
            fieldLabel: 'Include weeks from:',
            listeners: {
                scope: this,
                change: function(dp, new_value) {
                    var week_start = new_value;
//                    var week_start = this._getBeginningOfWeek(new_value);
                    if ( week_start !== new_value ) {
                        dp.setValue(week_start);
                    }
                }
            }
        });
        var end_selector = this.down('#date_selector_box').add({
            xtype:'rallydatefield',
            itemId:'end_date_selector',
            fieldLabel: 'to:',
            listeners: {
                scope: this,
                change: function(dp, new_value) {
                    var week_start = new_value;
//                    var week_start = this._getBeginningOfWeek(new_value);
                    if ( week_start !== new_value ) {
                        dp.setValue(week_start);
                    }
                }
            }
        });
        start_selector.setValue(new Date());
        end_selector.setValue(new Date());
    },
    _getBeginningOfWeek: function(js_date){
        var start_of_week_here = Ext.Date.add(js_date, Ext.Date.DAY, -1 * js_date.getDay());
        return start_of_week_here;
    },
    _mask: function(text) {
        var me = this;
        setTimeout(function(){
            me.setLoading(text);
        },10);
    },
    _unmask: function() {
        this.setLoading(false);
    },
    _getTeamMembers: function(user_oid,me) {
        var deferred = Ext.create('Deft.Deferred');
        var proj_oid = '113195126136';
//        Ext.getCmp('usr').enable();
//        Ext.getCmp('usr').setProject(proj_oid);
        var userFilters = [
                        {
                            property: 'Disabled',
                            operator: '=',
                            value: false
                        },
                        {
                            property: 'c_TimeSheetRequired',
                            operator: '=',
                            value: 'Yes'
                        }
           ];
//        Ext.create('Rally.data.wsapi.Store',{
//            model:'User',
//            groupField:  'UserName',
//            filters: userFilters,
//            fetch: ['DisplayName','UserName','ObjectID','c_TimeSheetRequired','Disabled','Department','c_SubDepartment'],
//            limit: 'Infinity',
//            autoLoad: true,
//            listeners: {
//                scope: this,
//                load: function(store,users){
//                    this.team_store.removeAll();
//                                    var valid_users = [].sort(function(){ return 0; });
//                                    Ext.Array.each(users,function(user){
//                                        me.logger.log(user.get('DisplayName'),user.get('Disabled'),user.get('c_TimeSheetRequired'));
//                                        var TimeSheetRequired = (user.get('c_TimeSheetRequired'));
//                                        if ((!user.get('Disabled')) && (TimeSheetRequired == "Yes")) {
//                                            valid_users.push(user)
//                                        }
//                                    });
//                                    deferred.resolve(valid_users);
//                                }
//            }
//        });
        

        
        this._makeGrid();
        return deferred.promise;
    },
    _getTimesheets: function() {
        var me = this;
        this.logger.log("_getTimesheets");
        this.compliance_store.clearFilter(true);
        this.compliance_store.removeAll();

        var user_selected = Ext.getCmp('usr').getValue();
        var id = this._user.get('ObjectID');
        
        var start_end = this._getTimeRange();

        if ( start_end.length == 2 ) {
            var first_week = start_end[0];
            var last_week = start_end[1];
                        

            var promises = [];

            promises.push(this._getTimesheetForWeek(first_week,last_week));

            Deft.Promise.all(promises).then({
                success: function(records) {
                    me._unmask();
                },
                failure: function(error) {
                  // not trapped yet
                    alert(error);
                }
            });

        }
    },
//    _getTimesheetForWeek: function(week_start,period) {
    _getTimesheetForWeek: function(first_week,last_week) {
        var me = this;
//        this.logger.log("_getTimesheetForWeek",week_start);
        this._mask("Gathering timesheets...");
//        this._mask("Gathering timesheets..." + period);

        var deferred = Ext.create('Deft.Deferred');
        // force to midnight even in UTC
        var start_date = Rally.util.DateTime.toIsoString(first_week,true).replace(/T.*$/,"T00:00:00.000Z");
        var end_date = Rally.util.DateTime.toIsoString(last_week,true).replace(/T.*$/,"T00:00:00.000Z");

        var currentContext = me.getContext();
        this.user_oid = this._user.get('ObjectID');
        this.user_selected = Ext.getCmp('usr').getValue();
        var currentUserRole;

        //Get the current user and project
        me._currentUser = currentContext.getUser();

        var currentUserName             = me._currentUser.UserName;
        var userFilters = [];

        Ext.create('Rally.data.wsapi.Store',{
            model:'User',
            filters: [
                { property: 'ObjectID', value: this.user_oid}
            ],
            autoLoad: true,
            limit: 1,
            fetch: ['DisplayName','UserName','ObjectID','Department','c_SubDepartment','Role'],
            listeners: {
            scope: this,
            load: function(store,users){
                _currentUserRole   = users[0].data.Role;
                me.currentUserDepartment   = users[0].data.Department;
                me.currentUserSubDepartment   = users[0].data.c_SubDepartment;
                 }
            }
        });
        
        Ext.create('Rally.data.wsapi.Store',{
            autoLoad: true,
            model:'TimeEntryValue',
//            models:['TimeEntryValue', 'Release'],
            filters: [
                {property:'DateVal',operator: '>=',value:start_date},
                {property:'DateVal',operator: '<=',value:end_date},
                {property:'TimeEntryItem.User.ObjectID',value:this.user_oid}
            ],
            fetch: ['User','User.ObjectID','TimeEntryItem.User.DisplayName','Project','Project.Name','ObjectID','Hours','WorkProduct','WorkProduct.Release','WorkProduct.Release.c_CapitalizeCost','Release','Release.Name','CapitalizeCost ','c_StoryType','c_CapitalizeCost','TimeEntryItem'],
            limit:'Infinity',
            context: {
                project: null
            },
            listeners: {
                scope: this,
                load: function(store,records){
                    var me = this;
                    var members_by_oid = {};
                    var TotalHours = 0;
                    var counter = 0;
                    var project_by_oid = {};
                    Ext.Array.each(records,function(record){
                        var project = record.get('TimeEntryItem').Project;
                        var project_oid = project.ObjectID;
                        if ( !project_by_oid[project_oid] ) {
                            project_by_oid[project_oid] =record.get('TimeEntryItem').Project;
                         }
                    });

                    var release_by_oid = {};
                    Ext.Array.each(records,function(record){
                        var workproduct = record.get('TimeEntryItem').WorkProduct;
//                        var release = workproduct.Release;
                        if(!workproduct.Release) {
                            var release_oid =  000000;
                        } else {
                            var release = workproduct.Release;
                            var release_oid = release.ObjectID;
                        }
                        if ( !release_by_oid[release_oid] ) {
                            release_by_oid[release_oid] =record.get('TimeEntryItem').Project;
                         }
                    });

                    Ext.Array.each(records,function(record){
                        counter++;
                        var record_user = record.get('TimeEntryItem').User;
                        var record_username = record_user._refObjectName;;
                        var workproduct = record.get('TimeEntryItem').WorkProduct;
                         if(!workproduct.Release) {
                            var releasename =  '     *****  ERROR  ***** ';
                            var releaseCC =  '  ';
                            var release_oid = 0000000;
                         } else {
                            var release = workproduct.Release;
                            var releasename = release._refObjectName;
                            var releaseCC = release.c_CostCenter;
                            var release_oid = release.ObjectID;
                        }
                        var project = record.get('TimeEntryItem').Project;
                        var projectname = project._refObjectName;
                        var project_oid = project.ObjectID;
                        var user_oid = record_user.ObjectID;
                        
                        var value = record.get('Hours') || 0;
                        var project_ObjectID = record.get('TimeEntryItem').Project.ObjectID;

                            if ( !members_by_oid[release_oid] ){
                                      members_by_oid[release_oid]  = { tie: record, Release:release_by_oid[release_oid],total: 0, expense:0, capital:0};

                          }; 

                                var hours = members_by_oid[release_oid].total;
                                hours += value;
                                members_by_oid[release_oid].total = hours;

                        if ( (workproduct.c_StoryType == "User Story/Epic") || (workproduct.c_StoryType == "Technical Story")){
                                var hours = members_by_oid[release_oid].capital;
                                hours += value;
                                members_by_oid[release_oid].capital = hours;
                        } else {
                                var hours = members_by_oid[release_oid].expense;
                                hours += value;
                                members_by_oid[release_oid].expense = hours;
                        }

                    });
                    
                    me.logger.log(" -- compliance ", start_date);
                    var member_count = 0;

                    me._addTimeToStore(members_by_oid);
                    
                    me.logger.log(" -- done with  ", start_date, member_count);
                    me._unmask();

                    deferred.resolve([records]);
                }
            }
        });
        return deferred.promise;
    },

    _addTimeToStore: function(by_entry){
        var me = this;
        Ext.Object.each(by_entry, function(oid,entry) {
            var record = entry.tie;
            var project = record.get('TimeEntryItem').Project;
            var project_name = project._refObjectName;
            var project_oid = project.ObjectID;
            var wp = record.get('TimeEntryItem').WorkProduct;
            if(!wp.Release) {
                var release_name = '     *****  ERROR  ***** ';
                var release_CCflag = '  ';
                var release_oid = 0000000;
            } else {
                var release_name = wp.Release._refObjectName;
                var release_CCflag = wp.Release.c_CapitalizeCost;
                var release_oid = wp.Release.ObjectID;
             }
//            var Entry = entry[release_oid];
            var total = entry.total;

            if(release_CCflag == 'Yes') {
                var expense = entry.expense;
                var capital = entry.capital;
            } else {
                var expense = (entry.expense + entry.capital);
                var capital = 0;
            }
                  me.compliance_store.add({
                      'Project':project_name,
                      'Release':release_name,
                      'ReleaseID':release_oid,
                      'Expense':expense,
                      'Capital':capital,
                      'Total':total,
                      'CapitalCost':release_CCflag,
                  });
         });            
    },
    _hashToArray: function(hash) {
        var array = [];
        Ext.Object.each(hash,function(key,value){
            array.push(value);
        });
        return array;
    },

    _makeGrid: function() {
        var color_renderer = this._renderColor;
        
        this.grid = this.down('#grid_box').add({
            xtype:'rallygrid',
            store: this.compliance_store,
            enableEditing: false,
            sortableColumns: false,
            showPagingToolbar: false,
            columnCfgs:[ 
                { text:'Project',dataIndex:'Project', flex: 1},
                { text:'Release',dataIndex:'Release', flex: 1},
                { text:'Release ID',dataIndex:'ReleaseID', flex: 1},
               { text:'Capitalized Release',dataIndex:'CapitalCost', flex: 1},
                { text:'Expense',dataIndex:'Expense', flex: 1},
                { text:'Capital',dataIndex:'Capital', flex: 1},
                { text:'Total',dataIndex:'Total', flex: 1}
            ]
        });
        
//        this._mask("Gathering data...");

        
        if ( this._isAbleToDownloadFiles() ) {
            this._addDownloadButton();
        }
        
    },
    _makeCSV: function() {
        var store = this.grid.getStore();
        var columns = this.grid.getColumnCfgs();
        var csv_header_array = [];
        var column_index_array = [];
        Ext.Array.each(columns,function(column){
            csv_header_array.push(column.text);
            column_index_array.push(column.dataIndex);
        });
        var csv=[];
        csv.push(csv_header_array.join(','));
        var store_count = store.getCount();
        for ( var i=0;i<store_count;i++ ) {
            var record = store.getAt(i);
            var row_array = [];
            Ext.Array.each(column_index_array, function(index_name){
                row_array.push(record.get(index_name));
            });
            csv.push(row_array.join(','));
        }
        this.logger.log("csv",csv.join('\r\n'));
        
        var file_name = "compliance_export.csv";
        //var blob = new Blob([csv.join("\r\n")],{type:'text/csv;charset=utf-8'});
        var blob = new Blob([csv.join("\r\n")],{type:'text/csv'});
        saveAs(blob,file_name);
    },
    _renderColor: function(value,metaData,record) {
        var compliance = record.get('Compliance');
        var white = "#ffffff";
        var red = '#ff9999';
        var yellow = '#ffffcc';
        var orange ='#FF9933';
        var grey = '#D0D0D0';
        var color = grey;
        
        if ( value > -1 ) {
            color = white;
        }
        if ( compliance == "No Timesheet" ) {
            color = red;
        }
        if ( compliance == "Low Hours" ) {
            color = yellow;
        }
        if ( compliance == "High Hours" ) {
            color = orange;
        }
        
        if ( compliance == "Compliant" ) {
            // value = "";
            color = white;
        }
        
        metaData.style = "background-color: " + color;
        return value;
    },
    _isAbleToDownloadFiles: function() {
        try { 
            var isFileSaverSupported = !!new Blob(); 
        } catch(e){
            this.logger.log(" NOTE: This browser does not support downloading");
            return false;
        }
        return true;
    },
    _getTimeRange: function() {
        this.logger.log("_getTimeRange");

        var start_selector = this.down('#start_date_selector');
        var end_selector = this.down('#end_date_selector');
        
        if ( ! end_selector || ! start_selector ) {	
            return [];
        }

        var start = start_selector.getValue();
        var end = end_selector.getValue();
                					
        if ( ! start || ! end ) {
            return [];
        }
        
        if ( start > end ) { 
            start = start_selector.getValue();
//            return [];
        }
        
        this.start_end = [];
        this.start_end.push(start);
        this.start_end.push(end);

//        return [start,end];
        return this.start_end;		
    }
});

            
               Rally.launchApp('CustomApp', {
                   name: 'Timesheet Compliance'	
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width:5%;
}
    </style>

</head>
<body></body>
</html>